---
import { Menu, HelpCircle, Settings, MessageCircle } from "@lucide/astro";
import MobileMenu from "./MobileMenu.astro";
import NavLink from "./NavLink.astro";

// Definición centralizada de los elementos de navegación
const navItems = [
  {
    href: "#quees",
    text: "¿Qué es Miranti?",
    icon: HelpCircle,
    iconSize: 18,
    iconStrokeWidth: 2
  },
  {
    href: "#comofunciona",
    text: "Cómo Funciona",
    icon: Settings,
    iconSize: 18,
    iconStrokeWidth: 2
  },
  {
    href: "#testimonios",
    text: "Testimonios",
    icon: MessageCircle,
    iconSize: 18,
    iconStrokeWidth: 2
  }
];

// Elemento CTA (Call-to-Action)
const ctaItem = {
  href: "#unete",
  text: "Únete a Miranti"
};
---

<header class="fixed top-4 left-0 right-0 z-50 mx-auto w-full max-w-7xl px-4">
  <nav
    class="bg-black/70 backdrop-blur-md rounded-full border border-white/20 shadow-lg ring-1 ring-white/30 flex items-center justify-between py-3 px-8"
  >
    <!-- Logo -->

    <a href="/" class="flex items-center gap-4 py-2">
      <img src="/miranti/icon.svg" alt="Miranti" class="h-8 md:h-10" />
      <img src="/miranti/name.svg" alt="Miranti" class="h-6 md:h-8" />
    </a>

  <!-- Menú desktop -->
    <div class="hidden lg:flex items-center gap-2 lg:gap-4">
      {navItems.map(item => (
        <NavLink href={item.href} text={item.text} />
      ))}
      <NavLink href={ctaItem.href} text={ctaItem.text} isHighlighted={true} />
    </div>

  <!-- Menú móvil - Botón toggle -->
    <button
      id="menu-toggle"
      class="lg:hidden text-white p-2 rounded-full hover:bg-white/10 transition-colors"
      aria-expanded="false"
      aria-controls="mobile-menu"
      aria-label="Abrir menú de navegación"
    >
      <Menu size={24} stroke-width={2} />
    </button>
  </nav>

  <!-- Componente del menú móvil -->
  <MobileMenu navItems={navItems} ctaItem={ctaItem} />
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const menuToggle = document.getElementById("menu-toggle");
    const menuClose = document.getElementById("menu-close");
    const mobileMenu = document.getElementById("mobile-menu");
    const navLinks = mobileMenu?.querySelectorAll("a");
    
    // Función para controlar la apertura/cierre del menú
    function toggleMenu(isOpen: boolean) {
      if (!mobileMenu || !menuToggle) return;
      
      // Actualizar visibilidad del menú
      if (isOpen) {
        mobileMenu.classList.remove("hidden");
      } else {
        mobileMenu.classList.add("hidden");
      }
      
      // Actualizar atributos ARIA
      menuToggle.setAttribute("aria-expanded", isOpen ? "true" : "false");
      
      // Manejar el foco
      if (isOpen && navLinks && navLinks.length > 0) {
        // Mover el foco al primer elemento del menú cuando se abre
        setTimeout(() => {
          navLinks[0].focus();
        }, 100);
      }
    }

    // Controladores de eventos
    menuToggle?.addEventListener("click", () => {
      const isCurrentlyHidden = mobileMenu?.classList.contains("hidden") ?? false;
      toggleMenu(isCurrentlyHidden);
    });

    menuClose?.addEventListener("click", () => {
      toggleMenu(false);
      // Devolver el foco al botón de toggle
      menuToggle?.focus();
    });
    
    // Cerrar el menú con tecla ESC
    mobileMenu?.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        toggleMenu(false);
        menuToggle?.focus();
      }
    });
  });
</script>
